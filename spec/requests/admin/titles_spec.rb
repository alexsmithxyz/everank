require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/admin/titles", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Title. As you add validations to Title, be sure to adjust the attributes
  # here as well.
  let(:valid_attributes) do
    {
      name: 'Title Name',
      date_available: '2025-10-17',
      description: 'This is the description'
    }
  end

  let(:invalid_attributes) { { name: '   ', date_available: '2025' } }

  shared_examples 'expect admin/titles endpoints inaccessible' do
    describe 'GET /new' do
      it 'renders a not found response' do
        get new_admin_title_url
        expect(response).to be_not_found
      end
    end

    describe 'GET /edit' do
      it 'renders a not found response' do
        title = Title.create! valid_attributes
        get edit_admin_title_url(title)
        expect(response).to be_not_found
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'does not create a new Title' do
          expect do
            post admin_titles_url, params: { title: valid_attributes }
          end.to change(Title, :count).by(0)
        end

        it 'renders a not found response' do
          post admin_titles_url, params: { title: valid_attributes }
          expect(response).to be_not_found
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new Title' do
          expect do
            post admin_titles_url, params: { title: invalid_attributes }
          end.to change(Title, :count).by(0)
        end

        it 'renders a not found response' do
          post admin_titles_url, params: { title: invalid_attributes }
          expect(response).to be_not_found
        end
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) do
          {
            name: 'New title name',
            date_available: '2024-10-17',
            description: 'This is the new title description'
          }
        end

        it 'does not update the requested title' do
          title = Title.create! valid_attributes
          patch admin_title_url(title), params: { title: new_attributes }
          title.reload
          expect(title.name).to eq('Title Name')
          expect(title.date_available).to eq(Date.new(2025, 10, 17))
          expect(title.description).to eq('This is the description')
        end

        it 'renders not found response' do
          title = Title.create! valid_attributes
          patch admin_title_url(title), params: { title: new_attributes }
          title.reload
          expect(response).to be_not_found
        end
      end

      context 'with invalid parameters' do
        it 'renders not found response' do
          title = Title.create! valid_attributes
          patch admin_title_url(title), params: { title: invalid_attributes }
          expect(response).to be_not_found
        end
      end
    end

    describe 'DELETE /destroy' do
      it 'does not destroy the requested title' do
        title = Title.create! valid_attributes
        expect do
          delete admin_title_url(title)
        end.to change(Title, :count).by(0)
      end

      it 'renders not found response' do
        title = Title.create! valid_attributes
        delete admin_title_url(title)
        expect(response).to be_not_found
      end
    end
  end

  context 'not signed in' do
    include_examples 'expect admin/titles endpoints inaccessible'
  end

  context 'signed in as user' do
    include_context 'ordinary user signed in'
    include_examples 'expect admin/titles endpoints inaccessible'
  end

  context 'signed in as admin' do
    include_context 'admin user signed in'

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_admin_title_url
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'renders a successful response' do
        title = Title.create! valid_attributes
        get edit_admin_title_url(title)
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new Title' do
          expect do
            post admin_titles_url, params: { title: valid_attributes }
          end.to change(Title, :count).by(1)
        end

        it 'redirects to the created title' do
          post admin_titles_url, params: { title: valid_attributes }
          expect(response).to redirect_to(title_url(Title.last))
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new Title' do
          expect do
            post admin_titles_url, params: { title: invalid_attributes }
          end.to change(Title, :count).by(0)
        end

        it "renders a response with 422 status (i.e. to display the 'new' template)" do
          post admin_titles_url, params: { title: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_content)
        end
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) do
          {
            name: 'New title name',
            date_available: '2024-10-17',
            description: 'This is the new title description'
          }
        end

        it 'updates the requested title' do
          title = Title.create! valid_attributes
          patch admin_title_url(title), params: { title: new_attributes }
          title.reload
          expect(title.name).to eq('New title name')
          expect(title.date_available).to eq(Date.new(2024, 10, 17))
          expect(title.description).to eq('This is the new title description')
        end

        it 'redirects to the title' do
          title = Title.create! valid_attributes
          patch admin_title_url(title), params: { title: new_attributes }
          title.reload
          expect(response).to redirect_to(title_url(title))
        end
      end

      context 'with invalid parameters' do
        it "renders a response with 422 status (i.e. to display the 'edit' template)" do
          title = Title.create! valid_attributes
          patch admin_title_url(title), params: { title: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_content)
        end
      end
    end

    describe 'DELETE /destroy' do
      it 'destroys the requested title' do
        title = Title.create! valid_attributes
        expect do
          delete admin_title_url(title)
        end.to change(Title, :count).by(-1)
      end

      it 'redirects to the titles list' do
        title = Title.create! valid_attributes
        delete admin_title_url(title)
        expect(response).to redirect_to(titles_url)
      end
    end
  end
end
