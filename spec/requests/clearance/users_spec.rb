require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe 'Clearance::Users', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to adjust the attributes here
  # as well.
  let(:valid_attributes) do
    { email: 'example@email.com', password: 'password' }
  end

  let(:invalid_attributes) do
    { email: 'invalid email', password: 'pass' }
  end

  context 'when signed out' do
    describe 'GET /sign_up' do
      it 'renders a successful response' do
        get sign_up_url
        expect(response).to be_successful
      end
    end

    describe 'POST /users' do
      context 'with valid parameters' do
        it 'creates a new User' do
          expect do
            post users_url, params: { user: valid_attributes }
          end.to change(User, :count).by(1)
        end

        it 'redirects to root' do
          post users_url, params: { user: valid_attributes }
          expect(response).to redirect_to(root_url)
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new User' do
          expect do
            post users_url, params: { user: invalid_attributes }
          end.to change(User, :count).by(0)
        end

        it "renders a response with 422 status (i.e. to display the 'new' template)" do
          post users_url, params: { user: invalid_attributes }
          expect(response).to be_unprocessable
        end
      end
    end
  end

  context 'when signed in' do
    include_context 'ordinary user signed in'

    describe 'GET /sign_up' do
      it 'redirects to root' do
        get sign_up_url
        expect(response).to redirect_to(root_url)
      end
    end

    describe 'POST /users' do
      it "doesn't create a new User" do
        expect do
          post users_url, params: { user: valid_attributes }
        end.to change(User, :count).by(0)
      end

      it 'redirects to root' do
        post users_url, params: { user: valid_attributes }
        expect(response).to redirect_to(root_url)
      end
    end
  end
end
